// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: v1alpha1/flightpath/passenger_flight_path_server.proto

package api_proto_v1alpha1_flightpath

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlightPathServiceClient is the client API for FlightPathService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlightPathServiceClient interface {
	// GetFlightPath is the handler for a post endpoint which expects
	// the list of flight path between intermediate airport codes.
	GetFlightPath(ctx context.Context, in *GetFlightPathRequest, opts ...grpc.CallOption) (*GetFlightPathResponse, error)
}

type flightPathServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlightPathServiceClient(cc grpc.ClientConnInterface) FlightPathServiceClient {
	return &flightPathServiceClient{cc}
}

func (c *flightPathServiceClient) GetFlightPath(ctx context.Context, in *GetFlightPathRequest, opts ...grpc.CallOption) (*GetFlightPathResponse, error) {
	out := new(GetFlightPathResponse)
	err := c.cc.Invoke(ctx, "/api.proto.v1alpha1.passenger.flightpath.FlightPathService/GetFlightPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlightPathServiceServer is the server API for FlightPathService service.
// All implementations should embed UnimplementedFlightPathServiceServer
// for forward compatibility
type FlightPathServiceServer interface {
	// GetFlightPath is the handler for a post endpoint which expects
	// the list of flight path between intermediate airport codes.
	GetFlightPath(context.Context, *GetFlightPathRequest) (*GetFlightPathResponse, error)
}

// UnimplementedFlightPathServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFlightPathServiceServer struct {
}

func (UnimplementedFlightPathServiceServer) GetFlightPath(context.Context, *GetFlightPathRequest) (*GetFlightPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlightPath not implemented")
}

// UnsafeFlightPathServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlightPathServiceServer will
// result in compilation errors.
type UnsafeFlightPathServiceServer interface {
	mustEmbedUnimplementedFlightPathServiceServer()
}

func RegisterFlightPathServiceServer(s grpc.ServiceRegistrar, srv FlightPathServiceServer) {
	s.RegisterService(&FlightPathService_ServiceDesc, srv)
}

func _FlightPathService_GetFlightPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlightPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlightPathServiceServer).GetFlightPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.proto.v1alpha1.passenger.flightpath.FlightPathService/GetFlightPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlightPathServiceServer).GetFlightPath(ctx, req.(*GetFlightPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlightPathService_ServiceDesc is the grpc.ServiceDesc for FlightPathService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlightPathService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.proto.v1alpha1.passenger.flightpath.FlightPathService",
	HandlerType: (*FlightPathServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFlightPath",
			Handler:    _FlightPathService_GetFlightPath_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1alpha1/flightpath/passenger_flight_path_server.proto",
}
